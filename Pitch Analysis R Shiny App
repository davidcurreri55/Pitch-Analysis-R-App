# load packages

library(plyr)
library(dplyr)
library(devtools)
library(DT)
library(ggplot2)
library(ggrepel)
library(ggthemes)
library(gridExtra)
library(janitor)
library(plotly)
library(stringr)
library(tidyr)
library(tidyselect)
library(tidyverse)
library(data.table)
library(reactable)
library(lubridate)
library(ggpubr)

# Import data / CSV 

TestTrackMan=fread("TestTrackMan.csv")
library(shiny)

TestTrackMan$Date <- mdy(TestTrackMan$Date)

# Define UI 
ui <- fluidPage(

  title = "Pitch Analysis App",
  
  titlePanel("Pitch Analysis"),
  # Tab for Pitchers
  tabPanel("Pitchers",
           sidebarLayout(
             sidebarPanel(
               selectInput("Team", label = "Choose Team",
                           choices = levels(as.factor(TestTrackMan$PitcherTeam))),
               selectInput("Pitcher", label = "Choose Pitcher",
                           choices = levels(as.factor(TestTrackMan$Pitcher))),
               dateRangeInput("Date", label = "Choose Date Range",
                              start = min(TestTrackMan$Date),
                              end = max(TestTrackMan$Date),
                              min = min(TestTrackMan$Date),
                              max = max(TestTrackMan$Date),
                              format = "yyyy-mm-dd",
                              separator = "to"),
               checkboxGroupInput("Pitch", label = "Choose Pitch Type(s)", 
                                  choices = levels(as.factor(TestTrackMan$TaggedPitchType)))
             ),
             mainPanel(
               tabsetPanel(
                 tabPanel("Velocity", 
                          br(),
                          plotOutput("Velocity_Plot")
                 ),
                 tabPanel("Heat Map", 
                          br(), 
                          plotOutput("Heat_Map")
                 ),
                 tabPanel("Location", 
                          br(),
                          br(),
                          br(),
                          plotOutput("Location_Plot")
                 ),
                 tabPanel("Movement/Release", 
                          br(),
                          plotOutput("Movement_Plot"), 
                          plotOutput("Release_Plot")
                 )
               )
             )
           )
  )
)
             
  

   



# Server 
server <- function(input, output, session) {

  #Isolating Pitcher, Pitch Type, and Date
  observeEvent(
    input$Team,
    updateSelectInput(session,
                      "Pitcher", "Choose Pitcher",
                      choices = levels(factor(filter(TestTrackMan,
                                                     PitcherTeam == isolate(input$Team))$Pitcher))))
  
  
  # Date Range Based on When Pitcher Threw
  
  observeEvent(
    input$Pitcher,
    updateDateRangeInput(session,
                         "Date", "Choose Date Range",
                         start = min(TestTrackMan$Date),
                         end = max(TestTrackMan$Date)))
  
  
  # Pitch Types Based on Pitcher
  
  observeEvent(
    input$Pitcher,
    updateCheckboxGroupInput(session,
                             "Pitch", "Choose Pitch Type(s)",
                             choices = levels(factor(filter(TestTrackMan,
                                                            Pitcher == isolate(input$Pitcher))$TaggedPitchType))))
  
  
  #Velocity Plot Output
  output$Velocity_Plot <- renderPlot({
    
    TestTrackMan%>%
      filter(PitcherTeam == input$Team,
             Pitcher == input$Pitcher,
             TaggedPitchType %in% input$Pitch) %>%
      ggplot(TestTrackMan, mapping = aes(x=PitchNo, y= RelSpeed, colour = TaggedPitchType)) +
      geom_line() + geom_point() +
      scale_color_manual(values = c(ChangeUp = "blue", Fastball = "black",
                                    Slider = "orange", Curveball = "red",
                                    Cutter = "green",Sinker = "grey",
                                    Splitter = "purple")) +
      ggtitle("Velocity / Pitch") +
      xlab("Pitch") + ylab("Velocity") + theme(
        plot.title = element_text(color = "black", size = 15, face = "bold", hjust = 0.5),
        axis.title.x = element_text(color="black", size = 13, face = "bold"),
        axis.title.y = element_text(color="black" , size = 13, face = "bold"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank())+
      geom_hline(yintercept = seq(from=70, to=100, by = 5))
    
  })
  
  #Heat Map Output
  output$Heat_Map <- renderPlot({
    heat_colors_interpolated <- colorRampPalette(paletteer::paletteer_d("RColorBrewer::RdBu", n = 9, direction = -1))(14)
    
    pp1 <- TestTrackMan%>%
      filter(PitcherTeam == input$Team,
             Pitcher == input$Pitcher,
             TaggedPitchType %in% input$Pitch)
    

    
    # Add in Parameters for Strike Zone / Plate
    Left <- -8.5/12
    Right <- 8.5/12
    Bottom <- 18.29/12
    Top <- 44.08/12
    
    # This is to Make a 3x3 Strike Zone (Vertical and Horizontal Lines in Zone)
    Width <- (Right - Left) / 3
    Height <- (Top - Bottom) / 3
    
    ggplot(pp1, mapping = aes(x=PlateLocSide, y= PlateLocHeight)) +
      stat_density2d_filled()  +
      scale_fill_manual(values = c(heat_colors_interpolated), aesthetics = c("fill", "color")) +
      # The Box (Bottom, Top, Left, Right)
      geom_segment(x = (Left), y = (Bottom), xend = (Right), yend = (Bottom)) +
      geom_segment(x = (Left), y = (Top), xend = (Right), yend = (Top)) +
      geom_segment(x = (Left), y = (Bottom), xend = (Left), yend = (Top)) +
      geom_segment(x = (Right), y = (Bottom), xend = (Right), yend = (Top)) +
      
      # Horizontal Lines (Bottom Inner, Top Inner)
      geom_segment(x = (Left), y = (Bottom + Height), xend = (Right), yend = (Bottom + Height)) +
      geom_segment(x = (Left), y = (Top - Height), xend = (Right), yend = (Top - Height)) +
      
      # Vertical Lines (Left Inner, Right Inner)
      geom_segment(x = (Left + Width), y = (Bottom), xend = (Left + Width), yend = (Top)) +
      geom_segment(x = (Right - Width), y = (Bottom), xend = (Right - Width), yend = (Top)) +
      
      # Plate (Bottom, Left Side, Left Diagonal, Right Diagonal, Right Side)  
      geom_segment(x = (Left), y = (0), xend = (Right), yend = (0)) +
      geom_segment(x = (Left), y = (0), xend = (Left), yend = (4.25/12)) +
      geom_segment(x = (Left), y = (4.25/12), xend = (0), yend = (8.5/12)) +
      geom_segment(x = (Right), y = (4.25/12), xend = (Right), yend = (0)) +
      geom_segment(x = (0), y = (8.5/12), xend = (Right), yend = (4.25/12)) +
      
      xlim(-3,3) + ylim(0, 5)  + 
      theme(
        legend.position = "none",
        plot.title = element_text(color = "black", size = 15, face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        panel.border = element_rect(color = "black", size = 1.5, fill = NA))
  })
 #Strike Zone Output
  output$Location_Plot <- renderPlot({
    # Your existing code...
    Left <- -8.5/12 
    Right <- 8.5/12 
    Bottom <- 18.29/12 
    Top <- 44.08/12 
    
    width <- (Right-Left) / 3 
    height <- (Top-Bottom) / 3 
    
    
    TestTrackMan %>%
      filter(PitcherTeam == input$Team,
             Pitcher == input$Pitcher,
             TaggedPitchType %in% input$Pitch) %>%
      ggplot(mapping = aes(x = PlateLocSide, y = PlateLocHeight)) +
      geom_point(aes(color = TaggedPitchType), size = 3) +
      scale_color_manual(values = c(
        ChangeUp = "blue", Fastball = "black", Slider = "orange",
        Curveball = "red", Cutter = "green", Sinker = "grey", Splitter = "purple"
      )) +
      geom_segment(x = Left, y = Bottom, xend = Right, yend = Bottom) +
      geom_segment(x = Left, y = Top, xend = Right, yend = Top) +
      geom_segment(x = Left, y = Bottom, xend = Left, yend = Top) +
      geom_segment(x = Right, y = Bottom, xend = Right, yend = Top) +
      geom_segment(x = Left, y = (Bottom + height), xend = Right, yend = (Bottom + height)) +
      geom_segment(x = Left, y = (Top - height), xend = Right, yend = (Top - height)) +
      geom_segment(x = (Left + width), y = Bottom, xend = (Left + width), yend = Top) +
      geom_segment(x = (Right - width), y = Bottom, xend = (Right - width), yend = Top) +
      geom_segment(x = Left, y = 0, xend = Right, yend = 0) +
      geom_segment(x = Left, y = 0, xend = Left, yend = (4.25/12)) +
      geom_segment(x = Left, y = (4.25/12), xend = 0, yend = (8.5/12)) +
      geom_segment(x = Right, y = (4.25/12), xend = Right, yend = 0) +
      geom_segment(x = 0, y = (8.5/12), xend = Right, yend = (4.25/12)) +
      xlim(-3,3) + ylim(0, 5) + 
      theme(
        plot.title = element_text(hjust = 0.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank()
      )
  })
    
  
   #Movement Plot Output
   output$Movement_Plot <- renderPlot({
    TestTrackMan %>%
      filter(PitcherTeam == input$Team,
             Pitcher == input$Pitcher,
             TaggedPitchType %in% input$Pitch) %>%
      ggplot(mapping = aes(x= HorzBreak, y= InducedVertBreak)) +
      labs(x= "Horizontal Break", y= "Induced Vertical Break", color= "", title= "Pitch Movement") +
      geom_point(aes(color= TaggedPitchType), size= 2) +
      scale_color_manual(values = c(
        ChangeUp = "blue", Fastball = "black", Slider = "orange",
        Curveball = "red", Cutter = "green", Sinker = "grey", Splitter = "purple"
      )) +
      geom_segment(aes(x= 0, y= -25, xend= 0, yend= 25), size= 1, color= "grey") +
      geom_segment(aes(x= -25, y= 0, xend= 25, yend= 0), size= 1, color= "grey") +
      xlim(-30, 30) + ylim(-30, 30) +
      theme(
        plot.title = element_text(hjust = 0.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank()
      )

  }, width= 450, height= 400) 
  

  
  #Release Plot Output
   output$Release_Plot <- renderPlot({
    TestTrackMan %>%
      filter(PitcherTeam == input$Team,
             Pitcher == input$Pitcher,
             TaggedPitchType %in% input$Pitch) %>%
      ggplot(mapping = aes(x= RelSide, y= RelHeight)) +
      labs(x= "Horizontal Release Point", y= "Vertical Release Point", color= "", title= "Release Point") +
      geom_point(aes(color= TaggedPitchType), size= 2) +
      scale_color_manual(values = c(
        ChangeUp = "blue", Fastball = "black", Slider = "orange",
        Curveball = "red", Cutter = "green", Sinker = "grey", Splitter = "purple"
      )) +
      
      xlim(-4, 4) + ylim(2, 7) +
      theme(
        plot.title = element_text(hjust = 0.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank()
      )
    
  }, width= 450, height= 400)      
}


# Run the application 
shinyApp(ui = ui, server = server)
